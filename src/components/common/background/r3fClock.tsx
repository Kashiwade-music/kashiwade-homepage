/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useGLTF, useAnimations } from "@react-three/drei";
import React, { useEffect, useRef } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    clock: THREE.Mesh;
  };
  materials: {};
};

type ActionName = "clock";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Clock(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "/assets/clock.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  useEffect(() => {
    if (actions["clock"]) {
      actions["clock"].play();
    }
    console.log(`\u001b[31m<Clock> Rendered\u001b[0m`);
  }, []);

  return (
    // @ts-ignore
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="clock"
          castShadow
          receiveShadow
          geometry={nodes.clock.geometry}
          material={nodes.clock.material}
          rotation={[0, 0, 1.117]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/assets/clock.glb");
